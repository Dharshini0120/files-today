/* eslint-disable @typescript-eslint/no-explicit-any */
"use client";
import React from "react";
import {
  Box,
  Button,
  Typography,
  MenuItem,
  Select,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  IconButton,
  Grid,
  InputLabel,
  FormControl,
} from "@mui/material";
import PictureAsPdfIcon from "@mui/icons-material/PictureAsPdf";
import { AddOutlined, Edit, RemoveRedEyeOutlined } from "@mui/icons-material";
import { useRouter } from "next/navigation";
import { useLazyQuery, useQuery } from "@apollo/client";
import { toast } from "react-toastify";
import DashboardLayout from "../../components/layout/DashboardLayout";
import { setTemplatesData } from "../../utils/templatesStore";
import { withPageLoader, CustomPagination } from "@frontend/shared-ui";
import {
  GET_USERS_TEMPLATES_QUERY,
  LIST_USER_ASSESSMENTS_QUERY,
  GetUsersTemplatesData,
  ListUserAssessmentsData,
  type Assessment,
  GET_ASSESSMENT_QUERY,
  GetAssessmentData,
} from "../../graphql/templates.service";

const baseStatusStyle = {
  fontWeight: 600,
  borderRadius: "4px",
  padding: "4px 8px",
  width: "120px",
  textAlign: "center",
};

const statusStyles: any = {
  IN_PROGRESS: {
    ...baseStatusStyle,
    backgroundColor: "#fff3cd",
    color: "#d8a714ff",
  },
  COMPLETED: {
    ...baseStatusStyle,
    backgroundColor: "#d4edda",
    color: "#18cf43ff",
  },
  BLOCKED: {
    ...baseStatusStyle,
    backgroundColor: "#fff3cd",
    color: "#d8a714ff",
  },
};

const Assessment = () => {
  const [status, setStatus] = React.useState<string[]>([]);
  const [allTime, setAllTime] = React.useState("");
  const [sortOrder, setSortOrder] = React.useState("");
  const [currentPage, setCurrentPage] = React.useState(1);
  const [rowsPerPage, setRowsPerPage] = React.useState(10);
  const [isClient, setIsClient] = React.useState(false);
  const router = useRouter();

  // Ensure component only renders on client side
  React.useEffect(() => {
    setIsClient(true);
  }, []);

  // GraphQL lazy query to fetch user templates only when needed
  const [getTemplates] = useLazyQuery<GetUsersTemplatesData>(
    GET_USERS_TEMPLATES_QUERY,
    {
      fetchPolicy: "cache-and-network",
      onError: (error) => {
        console.error("Error fetching user templates:", error);
        toast.error("Failed to load templates. Please try again.");
      },
    }
  );

  // GraphQL lazy query to fetch specific assessment
  const [getAssessment] = useLazyQuery<GetAssessmentData>(
    GET_ASSESSMENT_QUERY,
    {
      fetchPolicy: "cache-and-network",
      onError: (error) => {
        toast.error("Failed to load assessment. Please try again.");
      },
    }
  );

  // GraphQL query to fetch user assessments
  const {
    data: assessmentsData,
    loading: assessmentsLoading,
    error: assessmentsError,
  } = useQuery<ListUserAssessmentsData>(LIST_USER_ASSESSMENTS_QUERY, {
    variables: {
      page: currentPage,
      limit: rowsPerPage,
      statusFilter: status || undefined,
    },
    fetchPolicy: "cache-and-network",
    onError: (error) => {
      console.error("Error fetching assessments:", error);
      toast.error("Failed to load assessments. Please try again.");
    },
  });

  // Handle status filter change
  const handleStatusChange = (newStatus: string) => {
    if (newStatus === "IN_PROGRESS_OR_BLOCKED") {
      setStatus(["IN_PROGRESS", "BLOCKED"]); // array
    } else if (newStatus) {
      setStatus([newStatus]); // wrap single value as array
    } else {
      setStatus([]); // all
    }
    setCurrentPage(1); // Reset to first page when filtering
  };

  // Handle time filter change
  const handleTimeChange = (newTime: string) => {
    setAllTime(newTime);
    setCurrentPage(1); // Reset to first page when filtering
  };

  // Handle sort order change
  const handleSortChange = (newSort: string) => {
    setSortOrder(newSort);
    setCurrentPage(1); // Reset to first page when filtering
  };

  // Handle page change
  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };

  // Handle rows per page change
  const handleRowsPerPageChange = (newRowsPerPage: number) => {
    setRowsPerPage(newRowsPerPage);
    setCurrentPage(1); // Reset to first page when changing rows per page
  };

  // Format date for display
  const formatDate = (dateString: string) => {
    if (!dateString) return "-";
    const date = new Date(dateString);
    return date.toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });
  };

  // Get status display text
  const getStatusDisplayText = (status: string) => {
    switch (status) {
      case "IN_PROGRESS":
        return "In Progress";
      case "COMPLETED":
        return "Completed";
      case "BLOCKED":
        return "In Progress";
      default:
        return status;
    }
  };

  const handleNewAssessment = async () => {
    console.log("New Assessment clicked");

    try {
      // Fetch templates when button is clicked
      const result = await getTemplates();
      console.log("Templates data:", result.data);

      const response = result.data?.usersTemplates;

      // Check if there's an existing assessment in progress
      if (
        response?.message &&
        response.message.includes("already have an assessment in progress")
      ) {
        toast.error(response.message);
        return;
      }

      // Get templates from API response
      const apiTemplates = response?.scenarioVersions || [];

      // Filter for active templates with questionnaire data
      const availableTemplates = apiTemplates.filter(
        (template) =>
          template.status === "ACTIVE" &&
          template.isLatest &&
          template.questionnaire &&
          template.questionnaire.nodes &&
          Array.isArray(template.questionnaire.nodes) &&
          template.questionnaire.nodes.length > 0
      );

      if (availableTemplates.length === 0) {
        toast.error(
          "No available templates found. Please contact administrator."
        );
        return;
      }

      // Store templates data in context
      const templatesData = {
        scenarioVersions: availableTemplates,
        assessment: response?.assessment,
      };
      console.log("ðŸ“Š Storing templates data in store:", templatesData);
      setTemplatesData(templatesData);

      // Navigate to assessment page
      router.push("/assessment/new");
    } catch (error) {
      console.error("Error in handleNewAssessment:", error);
      toast.error("Failed to load templates. Please try again.");
    }
  };

  const handleEditAssessment = async (assessmentId: string) => {
    try {
      const result = await getAssessment({ variables: { assessmentId } });
      if (
        result.data?.getAssessment?.status === "success" &&
        result.data.getAssessment.assessment
      ) {
        const assessmentData = result.data.getAssessment.assessment;
        // Store the assessment data in the templates store
        const templatesData = {
          scenarioVersions: [], // We'll populate this from the assessment data
          assessment: assessmentData,
          isEditing: true,
          assessmentId: assessmentId,
        };

        setTemplatesData(templatesData);

        // Navigate to assessment page with assessment ID
        router.push(`/assessment/new?id=${assessmentId}`);
      } else {
        const errorMessage =
          result.data?.getAssessment?.message || "Unknown error occurred";
        toast.error(`Failed to load assessment: ${errorMessage}`);
      }
    } catch (error) {
      toast.error("Failed to load assessment. Please try again.");
    }
  };

  const handleViewAssessment = (assessmentId: string) => {
    // Navigate directly to review page with assessment ID
    router.push(`/assessment/review?id=${assessmentId}`);
  };

  // Get assessments from API response
  const assessments = assessmentsData?.listUserAssessments?.assessments || [];
  const pagination = assessmentsData?.listUserAssessments?.pagination;

  // Don't render until client side
  if (!isClient || typeof window === "undefined") {
    return null;
  }

  return (
    <DashboardLayout>
      <Box>
        <Box
          sx={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            mb: 3,
          }}
        >
          <Box>
            <Typography
              variant="h5"
              fontWeight={600}
              fontFamily={"var(--font-inter), sans-serif"}
            >
              Assessment Records
            </Typography>
            <Typography
              variant="subtitle1"
              color="#6c757d"
              fontFamily={"var(--font-inter), sans-serif"}
            >
              View and manage all assessments for City General Hospital
            </Typography>
          </Box>
          <Button
            onClick={handleNewAssessment}
            variant="contained"
            size="large"
            sx={{
              background: "linear-gradient(90deg, #408bff 0%, #3a7de6 100%)",
              textTransform: "none",
              letterSpacing: "0.5px",
              fontWeight: 500,
              fontFamily: "var(--font-inter), sans-serif",
              borderRadius: "4px",
              padding: "8px 24px",
              boxShadow: "0 2px 8px rgba(64, 139, 255, 0.25)",
              border: "none",
              "&:hover": {
                background: "linear-gradient(90deg, #3a7de6 0%, #3670cc 100%)",
                boxShadow: "0 4px 12px rgba(64, 139, 255, 0.3)",
              },
            }}
          >
            <AddOutlined /> &nbsp; New Assessment
          </Button>
        </Box>

        <Box
          sx={{
            border: "1px solid #e4e5e7",
            borderRadius: "10px",
            padding: 3,
            backgroundColor: "#fff",
          }}
        >
          <Grid container spacing={2} sx={{ mb: 2 }}>
            <Grid>
              <FormControl sx={{ minWidth: 230 }}>
                <InputLabel>Status</InputLabel>
                <Select
                  value={status}
                  label="Status"
                  style={{ borderRadius: "12px", height: "50px" }}
                  onChange={(e) => handleStatusChange(e.target.value)}
                >
                  <MenuItem value="">All Statuses</MenuItem>
                  <MenuItem value="IN_PROGRESS_OR_BLOCKED">In Progress</MenuItem>
                  <MenuItem value="COMPLETED">Completed</MenuItem>
                  {/* <MenuItem value="BLOCKED">Blocked</MenuItem> */}
                </Select>
              </FormControl>
            </Grid>
            <Grid>
              <FormControl sx={{ minWidth: 230 }}>
                <InputLabel>All Time</InputLabel>
                <Select
                  value={allTime}
                  label="All Time"
                  style={{ borderRadius: "12px", height: "50px" }}
                  onChange={(e) => handleTimeChange(e.target.value)}
                >
                  <MenuItem value="">All Time</MenuItem>
                  <MenuItem value="Last 30 Days">Last 30 Days</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            <Grid>
              <FormControl sx={{ minWidth: 230 }}>
                <InputLabel>Most Recent</InputLabel>
                <Select
                  value={sortOrder}
                  label="Most Recent"
                  style={{ borderRadius: "12px", height: "50px" }}
                  onChange={(e) => handleSortChange(e.target.value)}
                >
                  <MenuItem value="">Most Recent</MenuItem>
                  <MenuItem value="Oldest">Oldest</MenuItem>
                </Select>
              </FormControl>
            </Grid>
          </Grid>

          <TableContainer style={{ borderRadius: "12px", overflow: "hidden" }}>
            <Table>
              <TableHead sx={{ backgroundColor: "#f5f9ff" }}>
                <TableRow>
                  <TableCell>
                    <strong>Assessment Date</strong>
                  </TableCell>
                  <TableCell>
                    <strong>Status</strong>
                  </TableCell>
                  <TableCell>
                    <strong>Completed By</strong>
                  </TableCell>
                  <TableCell>
                    <strong>Actions</strong>
                  </TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {assessmentsLoading ? (
                  <TableRow>
                    <TableCell colSpan={4} align="center">
                      <Typography>Loading assessments...</Typography>
                    </TableCell>
                  </TableRow>
                ) : assessmentsError ? (
                  <TableRow>
                    <TableCell colSpan={4} align="center">
                      <Typography>No assessments Data</Typography>
                    </TableCell>
                  </TableRow>
                ) : assessments.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={4} align="center">
                      <Typography>No assessments found</Typography>
                    </TableCell>
                  </TableRow>
                ) : (
                  assessments.map((assessment: Assessment) => (
                    <TableRow key={assessment._id}>
                      <TableCell>
                        {formatDate(assessment.startedDate)}
                      </TableCell>
                      <TableCell>
                        <Box
                          sx={
                            statusStyles[assessment.status] ||
                            statusStyles["IN_PROGRESS"]
                          }
                        >
                          {getStatusDisplayText(assessment.status)}
                        </Box>
                      </TableCell>
                      <TableCell>{assessment.completedBy || "-"}</TableCell>
                      <TableCell>
                        {assessment.status === "COMPLETED" ? (
                          <>
                            <IconButton
                              onClick={() =>
                                handleViewAssessment(assessment._id)
                              }
                            >
                              <RemoveRedEyeOutlined
                                style={{ fontSize: "25px", color: "#408bff" }}
                              />
                            </IconButton>
                            {/* <IconButton>
                              <PictureAsPdfIcon
                                style={{ fontSize: "25px", color: "#18cf43ff" }}
                              />
                            </IconButton> */}
                          </>
                        ) : (
                          <IconButton
                            onClick={() => handleEditAssessment(assessment._id)}
                          >
                            <Edit
                              style={{ fontSize: "25px", color: "#408bff" }}
                            />
                          </IconButton>
                        )}
                      </TableCell>
                    </TableRow>
                  ))
                )}
              </TableBody>
            </Table>
          </TableContainer>

          {/* Pagination info */}
          {pagination && (
            <CustomPagination
              currentPage={pagination.page}
              totalPages={pagination.totalPages}
              rowsPerPage={rowsPerPage}
              totalItems={pagination.total}
              onPageChange={handlePageChange}
              onRowsPerPageChange={handleRowsPerPageChange}
              rowsPerPageOptions={[5, 10, 20, 50]}
            />
          )}
        </Box>
      </Box>
    </DashboardLayout>
  );
};

export default withPageLoader(Assessment);
